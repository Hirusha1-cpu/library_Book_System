package lk.samplelibrary.book.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import lk.samplelibrary.book.dao.BookDao;
import lk.samplelibrary.book.entity.BookEntity;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.PathVariable;

@RestController
public class BookController {
    @Autowired
    // create dao object
    private BookDao dao;

    @GetMapping(value = "/book/findall", produces = "application/json")
    public List<BookEntity> getAll() {
        return dao.findAll();

    }

    @RequestMapping(value = "/book")
    public ModelAndView employeeUI() {
        ModelAndView viewEmp = new ModelAndView();
        viewEmp.setViewName("book.html");
        return viewEmp;
    }

    @PostMapping(value = "/book")
    public String saveBook(@RequestBody BookEntity book) {

        // check unique values for duplicates
        BookEntity uniqueBookISBN = dao.getByIsbn(book.getIsbn());
        if (uniqueBookISBN != null) {
            return "This ISBN already exists in the database";
        }

        try {
            // set autogenerated values
            String nextBookId = dao.getNextBookId();
            if (nextBookId != null) {

                book.setBookId(nextBookId);
            } else {
                book.setBookId("0001");
            }
            dao.save(book);
            return "OK";

        } catch (Exception ex) {
            return ex.getMessage();
        }

    }

    @PutMapping(value = "/book")
    public String updateBook(@RequestBody BookEntity bookEntity) {

        BookEntity alreadyAvailable = dao.getReferenceById(bookEntity.getId());
        if (alreadyAvailable == null) {
            return "No Such record";
        }
        BookEntity alreaBookIsbn = dao.getByIsbn(bookEntity.getIsbn());
        if (alreaBookIsbn == null || bookEntity.getIsbn().equals(alreaBookIsbn.getIsbn())) {
            dao.save(bookEntity);
            return "OK";
        }

        return "OK";

    }

    @DeleteMapping(value = "/book")
    public String deleteBook(@RequestBody BookEntity bookEntity){
    try {
        String nextBookId = dao.getNextBookId();
        if (nextBookId == null) {
            bookEntity.setBookId("0001");
        }else{
            bookEntity.setBookId(nextBookId);
        }
        bookEntity.setDeleted(true);
        dao.save(bookEntity);
        return "OK";
    } catch (Exception e) {
        return "Erroe";
    }
    }

}
